//Chapter 4 Deep Comparison Activity 3
function deepEqual(valA, valB) {
    if (typeof valA === 'object' && typeof valB === 'object') {
        if (valA != null && valB != null) {
            let keysA = Object.keys(valA);
            let keysB = Object.keys(valB);
            if (keysA.length !== keysB.length) {
                return false;
            }
            if (keysA.join('') !== keysB.join('')) {
                return false;
            }
            for (let i = 0; i < keysA.length; i++) {
                if (deepEqual(valA[keysA[i]], valB[keysB[i]]) === false) {
                    return false;
                } else {
                    return true;
                }
            }
        } else {
            return false;
        } 
    } else {
        if (valA === valB) {
            return true;
        } else {
            return false;
        }
    }
}

//Sources Cited: Elias Van Ootegem. Deep comparison of objects/arrays [duplicate]. 
//Oct 8, 2019. https://stackoverflow.com/questions/13142968/deep-comparison-of-objects-arrays

function deepEqual(valA, valB) {
    if (typeof valA === 'object' && typeof valB === 'object') {
        if (valA != null && valB != null) {
            let keysA = Object.keys(valA);
            let keysB = Object.keys(valB);
            if (keysA.length !== keysB.length) {
                return false;
            }
            if (keysA.join('') !== keysB.join('')) {
                return false;
            }
            for (let i in keysA) {
                if (deepEqual(valA[keysA[i]], valB[keysB[i]]) === false) {
                    return false;
                } else {
                    return true;
                }
            }
        } else {
            return false;
        } 
    } else {
        if (valA === valB) {
            return true;
        } else {
            return false;
        }
    }
}

//Activity 1

console.log(jsHoist());

function jsHoist(){
  let example1 = 48;
  let example2 = 5 + example1;
 return example2;
}

//-> 53
//Because of hoisting, there is no error, not even 'undefined'

//------------------------------------------------------------//
let badExample;

console.log(badExample);
//->'undefined'
//There is no error, because this is another example of hoisting

console.log(callB4Assign());
//->'ReferenceError: not defined'
//This is not allowed at all

console.log(badExample());
//->'ReferenceError: not defined'
//This is also not allowed

badExample = function callB4Assign() {
    return "This is fun!";
}

let goodExample = function callAfter() {
    return "This is fun!";
}

console.log(goodExample());
//-> "This is fun!"
//This is accepted as a function call

console.log(callAfter());
//->'ReferenceError: not defined'
//This is also not allowed